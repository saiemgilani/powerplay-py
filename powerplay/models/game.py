# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Game(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'copyright': 'str',
        'game_pk': 'float',
        'link': 'str',
        'meta_data': 'GameMetaData',
        'game_data': 'GameGameData',
        'live_data': 'GameLiveData'
    }

    attribute_map = {
        'copyright': 'copyright',
        'game_pk': 'gamePk',
        'link': 'link',
        'meta_data': 'metaData',
        'game_data': 'gameData',
        'live_data': 'liveData'
    }

    def __init__(self, copyright=None, game_pk=None, link=None, meta_data=None, game_data=None, live_data=None):  # noqa: E501
        """Game - a model defined in Swagger"""  # noqa: E501
        self._copyright = None
        self._game_pk = None
        self._link = None
        self._meta_data = None
        self._game_data = None
        self._live_data = None
        self.discriminator = None
        if copyright is not None:
            self.copyright = copyright
        if game_pk is not None:
            self.game_pk = game_pk
        if link is not None:
            self.link = link
        if meta_data is not None:
            self.meta_data = meta_data
        if game_data is not None:
            self.game_data = game_data
        if live_data is not None:
            self.live_data = live_data

    @property
    def copyright(self):
        """Gets the copyright of this Game.  # noqa: E501


        :return: The copyright of this Game.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this Game.


        :param copyright: The copyright of this Game.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def game_pk(self):
        """Gets the game_pk of this Game.  # noqa: E501


        :return: The game_pk of this Game.  # noqa: E501
        :rtype: float
        """
        return self._game_pk

    @game_pk.setter
    def game_pk(self, game_pk):
        """Sets the game_pk of this Game.


        :param game_pk: The game_pk of this Game.  # noqa: E501
        :type: float
        """

        self._game_pk = game_pk

    @property
    def link(self):
        """Gets the link of this Game.  # noqa: E501


        :return: The link of this Game.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Game.


        :param link: The link of this Game.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def meta_data(self):
        """Gets the meta_data of this Game.  # noqa: E501


        :return: The meta_data of this Game.  # noqa: E501
        :rtype: GameMetaData
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this Game.


        :param meta_data: The meta_data of this Game.  # noqa: E501
        :type: GameMetaData
        """

        self._meta_data = meta_data

    @property
    def game_data(self):
        """Gets the game_data of this Game.  # noqa: E501


        :return: The game_data of this Game.  # noqa: E501
        :rtype: GameGameData
        """
        return self._game_data

    @game_data.setter
    def game_data(self, game_data):
        """Sets the game_data of this Game.


        :param game_data: The game_data of this Game.  # noqa: E501
        :type: GameGameData
        """

        self._game_data = game_data

    @property
    def live_data(self):
        """Gets the live_data of this Game.  # noqa: E501


        :return: The live_data of this Game.  # noqa: E501
        :rtype: GameLiveData
        """
        return self._live_data

    @live_data.setter
    def live_data(self, live_data):
        """Sets the live_data of this Game.


        :param live_data: The live_data of this Game.  # noqa: E501
        :type: GameLiveData
        """

        self._live_data = live_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Game, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Game):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
