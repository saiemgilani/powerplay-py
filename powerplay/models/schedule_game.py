# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScheduleGame(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'game_pk': 'float',
        'link': 'str',
        'game_type': 'str',
        'season': 'str',
        'game_date': 'datetime',
        'status': 'GameGameDataStatus',
        'teams': 'ScheduleGameTeams',
        'linescore': 'GameLinescore',
        'venue': 'GameGameDataVenue',
        'tickets': 'list[ScheduleGameTickets]',
        'content': 'ScheduleGameContent'
    }

    attribute_map = {
        'game_pk': 'gamePk',
        'link': 'link',
        'game_type': 'gameType',
        'season': 'season',
        'game_date': 'gameDate',
        'status': 'status',
        'teams': 'teams',
        'linescore': 'linescore',
        'venue': 'venue',
        'tickets': 'tickets',
        'content': 'content'
    }

    def __init__(self, game_pk=None, link=None, game_type=None, season=None, game_date=None, status=None, teams=None, linescore=None, venue=None, tickets=None, content=None):  # noqa: E501
        """ScheduleGame - a model defined in Swagger"""  # noqa: E501
        self._game_pk = None
        self._link = None
        self._game_type = None
        self._season = None
        self._game_date = None
        self._status = None
        self._teams = None
        self._linescore = None
        self._venue = None
        self._tickets = None
        self._content = None
        self.discriminator = None
        if game_pk is not None:
            self.game_pk = game_pk
        if link is not None:
            self.link = link
        if game_type is not None:
            self.game_type = game_type
        if season is not None:
            self.season = season
        if game_date is not None:
            self.game_date = game_date
        if status is not None:
            self.status = status
        if teams is not None:
            self.teams = teams
        if linescore is not None:
            self.linescore = linescore
        if venue is not None:
            self.venue = venue
        if tickets is not None:
            self.tickets = tickets
        if content is not None:
            self.content = content

    @property
    def game_pk(self):
        """Gets the game_pk of this ScheduleGame.  # noqa: E501


        :return: The game_pk of this ScheduleGame.  # noqa: E501
        :rtype: float
        """
        return self._game_pk

    @game_pk.setter
    def game_pk(self, game_pk):
        """Sets the game_pk of this ScheduleGame.


        :param game_pk: The game_pk of this ScheduleGame.  # noqa: E501
        :type: float
        """

        self._game_pk = game_pk

    @property
    def link(self):
        """Gets the link of this ScheduleGame.  # noqa: E501


        :return: The link of this ScheduleGame.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this ScheduleGame.


        :param link: The link of this ScheduleGame.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def game_type(self):
        """Gets the game_type of this ScheduleGame.  # noqa: E501


        :return: The game_type of this ScheduleGame.  # noqa: E501
        :rtype: str
        """
        return self._game_type

    @game_type.setter
    def game_type(self, game_type):
        """Sets the game_type of this ScheduleGame.


        :param game_type: The game_type of this ScheduleGame.  # noqa: E501
        :type: str
        """

        self._game_type = game_type

    @property
    def season(self):
        """Gets the season of this ScheduleGame.  # noqa: E501


        :return: The season of this ScheduleGame.  # noqa: E501
        :rtype: str
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this ScheduleGame.


        :param season: The season of this ScheduleGame.  # noqa: E501
        :type: str
        """

        self._season = season

    @property
    def game_date(self):
        """Gets the game_date of this ScheduleGame.  # noqa: E501


        :return: The game_date of this ScheduleGame.  # noqa: E501
        :rtype: datetime
        """
        return self._game_date

    @game_date.setter
    def game_date(self, game_date):
        """Sets the game_date of this ScheduleGame.


        :param game_date: The game_date of this ScheduleGame.  # noqa: E501
        :type: datetime
        """

        self._game_date = game_date

    @property
    def status(self):
        """Gets the status of this ScheduleGame.  # noqa: E501


        :return: The status of this ScheduleGame.  # noqa: E501
        :rtype: GameGameDataStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ScheduleGame.


        :param status: The status of this ScheduleGame.  # noqa: E501
        :type: GameGameDataStatus
        """

        self._status = status

    @property
    def teams(self):
        """Gets the teams of this ScheduleGame.  # noqa: E501


        :return: The teams of this ScheduleGame.  # noqa: E501
        :rtype: ScheduleGameTeams
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this ScheduleGame.


        :param teams: The teams of this ScheduleGame.  # noqa: E501
        :type: ScheduleGameTeams
        """

        self._teams = teams

    @property
    def linescore(self):
        """Gets the linescore of this ScheduleGame.  # noqa: E501


        :return: The linescore of this ScheduleGame.  # noqa: E501
        :rtype: GameLinescore
        """
        return self._linescore

    @linescore.setter
    def linescore(self, linescore):
        """Sets the linescore of this ScheduleGame.


        :param linescore: The linescore of this ScheduleGame.  # noqa: E501
        :type: GameLinescore
        """

        self._linescore = linescore

    @property
    def venue(self):
        """Gets the venue of this ScheduleGame.  # noqa: E501


        :return: The venue of this ScheduleGame.  # noqa: E501
        :rtype: GameGameDataVenue
        """
        return self._venue

    @venue.setter
    def venue(self, venue):
        """Sets the venue of this ScheduleGame.


        :param venue: The venue of this ScheduleGame.  # noqa: E501
        :type: GameGameDataVenue
        """

        self._venue = venue

    @property
    def tickets(self):
        """Gets the tickets of this ScheduleGame.  # noqa: E501


        :return: The tickets of this ScheduleGame.  # noqa: E501
        :rtype: list[ScheduleGameTickets]
        """
        return self._tickets

    @tickets.setter
    def tickets(self, tickets):
        """Sets the tickets of this ScheduleGame.


        :param tickets: The tickets of this ScheduleGame.  # noqa: E501
        :type: list[ScheduleGameTickets]
        """

        self._tickets = tickets

    @property
    def content(self):
        """Gets the content of this ScheduleGame.  # noqa: E501


        :return: The content of this ScheduleGame.  # noqa: E501
        :rtype: ScheduleGameContent
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ScheduleGame.


        :param content: The content of this ScheduleGame.  # noqa: E501
        :type: ScheduleGameContent
        """

        self._content = content

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScheduleGame, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduleGame):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
