# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StandingsRecords(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'standings_type': 'str',
        'league': 'StandingsLeague',
        'division': 'StandingsDivision',
        'conference': 'DivisionConference',
        'team_records': 'list[StandingsTeamRecords]'
    }

    attribute_map = {
        'standings_type': 'standingsType',
        'league': 'league',
        'division': 'division',
        'conference': 'conference',
        'team_records': 'teamRecords'
    }

    def __init__(self, standings_type=None, league=None, division=None, conference=None, team_records=None):  # noqa: E501
        """StandingsRecords - a model defined in Swagger"""  # noqa: E501
        self._standings_type = None
        self._league = None
        self._division = None
        self._conference = None
        self._team_records = None
        self.discriminator = None
        if standings_type is not None:
            self.standings_type = standings_type
        if league is not None:
            self.league = league
        if division is not None:
            self.division = division
        if conference is not None:
            self.conference = conference
        if team_records is not None:
            self.team_records = team_records

    @property
    def standings_type(self):
        """Gets the standings_type of this StandingsRecords.  # noqa: E501


        :return: The standings_type of this StandingsRecords.  # noqa: E501
        :rtype: str
        """
        return self._standings_type

    @standings_type.setter
    def standings_type(self, standings_type):
        """Sets the standings_type of this StandingsRecords.


        :param standings_type: The standings_type of this StandingsRecords.  # noqa: E501
        :type: str
        """
        allowed_values = ["regularSeason"]  # noqa: E501
        if standings_type not in allowed_values:
            raise ValueError(
                "Invalid value for `standings_type` ({0}), must be one of {1}"  # noqa: E501
                .format(standings_type, allowed_values)
            )

        self._standings_type = standings_type

    @property
    def league(self):
        """Gets the league of this StandingsRecords.  # noqa: E501


        :return: The league of this StandingsRecords.  # noqa: E501
        :rtype: StandingsLeague
        """
        return self._league

    @league.setter
    def league(self, league):
        """Sets the league of this StandingsRecords.


        :param league: The league of this StandingsRecords.  # noqa: E501
        :type: StandingsLeague
        """

        self._league = league

    @property
    def division(self):
        """Gets the division of this StandingsRecords.  # noqa: E501


        :return: The division of this StandingsRecords.  # noqa: E501
        :rtype: StandingsDivision
        """
        return self._division

    @division.setter
    def division(self, division):
        """Sets the division of this StandingsRecords.


        :param division: The division of this StandingsRecords.  # noqa: E501
        :type: StandingsDivision
        """

        self._division = division

    @property
    def conference(self):
        """Gets the conference of this StandingsRecords.  # noqa: E501


        :return: The conference of this StandingsRecords.  # noqa: E501
        :rtype: DivisionConference
        """
        return self._conference

    @conference.setter
    def conference(self, conference):
        """Sets the conference of this StandingsRecords.


        :param conference: The conference of this StandingsRecords.  # noqa: E501
        :type: DivisionConference
        """

        self._conference = conference

    @property
    def team_records(self):
        """Gets the team_records of this StandingsRecords.  # noqa: E501


        :return: The team_records of this StandingsRecords.  # noqa: E501
        :rtype: list[StandingsTeamRecords]
        """
        return self._team_records

    @team_records.setter
    def team_records(self, team_records):
        """Sets the team_records of this StandingsRecords.


        :param team_records: The team_records of this StandingsRecords.  # noqa: E501
        :type: list[StandingsTeamRecords]
        """

        self._team_records = team_records

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StandingsRecords, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StandingsRecords):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
