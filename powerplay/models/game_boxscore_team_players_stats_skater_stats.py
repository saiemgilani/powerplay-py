# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GameBoxscoreTeamPlayersStatsSkaterStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time_on_ice': 'str',
        'assists': 'float',
        'goals': 'float',
        'shots': 'float',
        'hits': 'float',
        'power_play_goals': 'float',
        'power_play_assists': 'float',
        'penalty_minutes': 'float',
        'face_off_wins': 'float',
        'faceoff_taken': 'float',
        'takeaways': 'float',
        'giveaways': 'float',
        'short_handed_goals': 'float',
        'short_handed_assists': 'float',
        'blocked': 'float',
        'plus_minus': 'float',
        'even_time_on_ice': 'str',
        'power_play_time_on_ice': 'str',
        'short_handed_time_on_ice': 'str'
    }

    attribute_map = {
        'time_on_ice': 'timeOnIce',
        'assists': 'assists',
        'goals': 'goals',
        'shots': 'shots',
        'hits': 'hits',
        'power_play_goals': 'powerPlayGoals',
        'power_play_assists': 'powerPlayAssists',
        'penalty_minutes': 'penaltyMinutes',
        'face_off_wins': 'faceOffWins',
        'faceoff_taken': 'faceoffTaken',
        'takeaways': 'takeaways',
        'giveaways': 'giveaways',
        'short_handed_goals': 'shortHandedGoals',
        'short_handed_assists': 'shortHandedAssists',
        'blocked': 'blocked',
        'plus_minus': 'plusMinus',
        'even_time_on_ice': 'evenTimeOnIce',
        'power_play_time_on_ice': 'powerPlayTimeOnIce',
        'short_handed_time_on_ice': 'shortHandedTimeOnIce'
    }

    def __init__(self, time_on_ice=None, assists=None, goals=None, shots=None, hits=None, power_play_goals=None, power_play_assists=None, penalty_minutes=None, face_off_wins=None, faceoff_taken=None, takeaways=None, giveaways=None, short_handed_goals=None, short_handed_assists=None, blocked=None, plus_minus=None, even_time_on_ice=None, power_play_time_on_ice=None, short_handed_time_on_ice=None):  # noqa: E501
        """GameBoxscoreTeamPlayersStatsSkaterStats - a model defined in Swagger"""  # noqa: E501
        self._time_on_ice = None
        self._assists = None
        self._goals = None
        self._shots = None
        self._hits = None
        self._power_play_goals = None
        self._power_play_assists = None
        self._penalty_minutes = None
        self._face_off_wins = None
        self._faceoff_taken = None
        self._takeaways = None
        self._giveaways = None
        self._short_handed_goals = None
        self._short_handed_assists = None
        self._blocked = None
        self._plus_minus = None
        self._even_time_on_ice = None
        self._power_play_time_on_ice = None
        self._short_handed_time_on_ice = None
        self.discriminator = None
        if time_on_ice is not None:
            self.time_on_ice = time_on_ice
        if assists is not None:
            self.assists = assists
        if goals is not None:
            self.goals = goals
        if shots is not None:
            self.shots = shots
        if hits is not None:
            self.hits = hits
        if power_play_goals is not None:
            self.power_play_goals = power_play_goals
        if power_play_assists is not None:
            self.power_play_assists = power_play_assists
        if penalty_minutes is not None:
            self.penalty_minutes = penalty_minutes
        if face_off_wins is not None:
            self.face_off_wins = face_off_wins
        if faceoff_taken is not None:
            self.faceoff_taken = faceoff_taken
        if takeaways is not None:
            self.takeaways = takeaways
        if giveaways is not None:
            self.giveaways = giveaways
        if short_handed_goals is not None:
            self.short_handed_goals = short_handed_goals
        if short_handed_assists is not None:
            self.short_handed_assists = short_handed_assists
        if blocked is not None:
            self.blocked = blocked
        if plus_minus is not None:
            self.plus_minus = plus_minus
        if even_time_on_ice is not None:
            self.even_time_on_ice = even_time_on_ice
        if power_play_time_on_ice is not None:
            self.power_play_time_on_ice = power_play_time_on_ice
        if short_handed_time_on_ice is not None:
            self.short_handed_time_on_ice = short_handed_time_on_ice

    @property
    def time_on_ice(self):
        """Gets the time_on_ice of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501


        :return: The time_on_ice of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :rtype: str
        """
        return self._time_on_ice

    @time_on_ice.setter
    def time_on_ice(self, time_on_ice):
        """Sets the time_on_ice of this GameBoxscoreTeamPlayersStatsSkaterStats.


        :param time_on_ice: The time_on_ice of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :type: str
        """

        self._time_on_ice = time_on_ice

    @property
    def assists(self):
        """Gets the assists of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501


        :return: The assists of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :rtype: float
        """
        return self._assists

    @assists.setter
    def assists(self, assists):
        """Sets the assists of this GameBoxscoreTeamPlayersStatsSkaterStats.


        :param assists: The assists of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :type: float
        """

        self._assists = assists

    @property
    def goals(self):
        """Gets the goals of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501


        :return: The goals of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :rtype: float
        """
        return self._goals

    @goals.setter
    def goals(self, goals):
        """Sets the goals of this GameBoxscoreTeamPlayersStatsSkaterStats.


        :param goals: The goals of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :type: float
        """

        self._goals = goals

    @property
    def shots(self):
        """Gets the shots of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501


        :return: The shots of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :rtype: float
        """
        return self._shots

    @shots.setter
    def shots(self, shots):
        """Sets the shots of this GameBoxscoreTeamPlayersStatsSkaterStats.


        :param shots: The shots of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :type: float
        """

        self._shots = shots

    @property
    def hits(self):
        """Gets the hits of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501


        :return: The hits of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :rtype: float
        """
        return self._hits

    @hits.setter
    def hits(self, hits):
        """Sets the hits of this GameBoxscoreTeamPlayersStatsSkaterStats.


        :param hits: The hits of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :type: float
        """

        self._hits = hits

    @property
    def power_play_goals(self):
        """Gets the power_play_goals of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501


        :return: The power_play_goals of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :rtype: float
        """
        return self._power_play_goals

    @power_play_goals.setter
    def power_play_goals(self, power_play_goals):
        """Sets the power_play_goals of this GameBoxscoreTeamPlayersStatsSkaterStats.


        :param power_play_goals: The power_play_goals of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :type: float
        """

        self._power_play_goals = power_play_goals

    @property
    def power_play_assists(self):
        """Gets the power_play_assists of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501


        :return: The power_play_assists of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :rtype: float
        """
        return self._power_play_assists

    @power_play_assists.setter
    def power_play_assists(self, power_play_assists):
        """Sets the power_play_assists of this GameBoxscoreTeamPlayersStatsSkaterStats.


        :param power_play_assists: The power_play_assists of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :type: float
        """

        self._power_play_assists = power_play_assists

    @property
    def penalty_minutes(self):
        """Gets the penalty_minutes of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501


        :return: The penalty_minutes of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :rtype: float
        """
        return self._penalty_minutes

    @penalty_minutes.setter
    def penalty_minutes(self, penalty_minutes):
        """Sets the penalty_minutes of this GameBoxscoreTeamPlayersStatsSkaterStats.


        :param penalty_minutes: The penalty_minutes of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :type: float
        """

        self._penalty_minutes = penalty_minutes

    @property
    def face_off_wins(self):
        """Gets the face_off_wins of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501


        :return: The face_off_wins of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :rtype: float
        """
        return self._face_off_wins

    @face_off_wins.setter
    def face_off_wins(self, face_off_wins):
        """Sets the face_off_wins of this GameBoxscoreTeamPlayersStatsSkaterStats.


        :param face_off_wins: The face_off_wins of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :type: float
        """

        self._face_off_wins = face_off_wins

    @property
    def faceoff_taken(self):
        """Gets the faceoff_taken of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501


        :return: The faceoff_taken of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :rtype: float
        """
        return self._faceoff_taken

    @faceoff_taken.setter
    def faceoff_taken(self, faceoff_taken):
        """Sets the faceoff_taken of this GameBoxscoreTeamPlayersStatsSkaterStats.


        :param faceoff_taken: The faceoff_taken of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :type: float
        """

        self._faceoff_taken = faceoff_taken

    @property
    def takeaways(self):
        """Gets the takeaways of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501


        :return: The takeaways of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :rtype: float
        """
        return self._takeaways

    @takeaways.setter
    def takeaways(self, takeaways):
        """Sets the takeaways of this GameBoxscoreTeamPlayersStatsSkaterStats.


        :param takeaways: The takeaways of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :type: float
        """

        self._takeaways = takeaways

    @property
    def giveaways(self):
        """Gets the giveaways of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501


        :return: The giveaways of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :rtype: float
        """
        return self._giveaways

    @giveaways.setter
    def giveaways(self, giveaways):
        """Sets the giveaways of this GameBoxscoreTeamPlayersStatsSkaterStats.


        :param giveaways: The giveaways of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :type: float
        """

        self._giveaways = giveaways

    @property
    def short_handed_goals(self):
        """Gets the short_handed_goals of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501


        :return: The short_handed_goals of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :rtype: float
        """
        return self._short_handed_goals

    @short_handed_goals.setter
    def short_handed_goals(self, short_handed_goals):
        """Sets the short_handed_goals of this GameBoxscoreTeamPlayersStatsSkaterStats.


        :param short_handed_goals: The short_handed_goals of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :type: float
        """

        self._short_handed_goals = short_handed_goals

    @property
    def short_handed_assists(self):
        """Gets the short_handed_assists of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501


        :return: The short_handed_assists of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :rtype: float
        """
        return self._short_handed_assists

    @short_handed_assists.setter
    def short_handed_assists(self, short_handed_assists):
        """Sets the short_handed_assists of this GameBoxscoreTeamPlayersStatsSkaterStats.


        :param short_handed_assists: The short_handed_assists of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :type: float
        """

        self._short_handed_assists = short_handed_assists

    @property
    def blocked(self):
        """Gets the blocked of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501


        :return: The blocked of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :rtype: float
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked):
        """Sets the blocked of this GameBoxscoreTeamPlayersStatsSkaterStats.


        :param blocked: The blocked of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :type: float
        """

        self._blocked = blocked

    @property
    def plus_minus(self):
        """Gets the plus_minus of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501


        :return: The plus_minus of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :rtype: float
        """
        return self._plus_minus

    @plus_minus.setter
    def plus_minus(self, plus_minus):
        """Sets the plus_minus of this GameBoxscoreTeamPlayersStatsSkaterStats.


        :param plus_minus: The plus_minus of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :type: float
        """

        self._plus_minus = plus_minus

    @property
    def even_time_on_ice(self):
        """Gets the even_time_on_ice of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501


        :return: The even_time_on_ice of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :rtype: str
        """
        return self._even_time_on_ice

    @even_time_on_ice.setter
    def even_time_on_ice(self, even_time_on_ice):
        """Sets the even_time_on_ice of this GameBoxscoreTeamPlayersStatsSkaterStats.


        :param even_time_on_ice: The even_time_on_ice of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :type: str
        """

        self._even_time_on_ice = even_time_on_ice

    @property
    def power_play_time_on_ice(self):
        """Gets the power_play_time_on_ice of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501


        :return: The power_play_time_on_ice of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :rtype: str
        """
        return self._power_play_time_on_ice

    @power_play_time_on_ice.setter
    def power_play_time_on_ice(self, power_play_time_on_ice):
        """Sets the power_play_time_on_ice of this GameBoxscoreTeamPlayersStatsSkaterStats.


        :param power_play_time_on_ice: The power_play_time_on_ice of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :type: str
        """

        self._power_play_time_on_ice = power_play_time_on_ice

    @property
    def short_handed_time_on_ice(self):
        """Gets the short_handed_time_on_ice of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501


        :return: The short_handed_time_on_ice of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :rtype: str
        """
        return self._short_handed_time_on_ice

    @short_handed_time_on_ice.setter
    def short_handed_time_on_ice(self, short_handed_time_on_ice):
        """Sets the short_handed_time_on_ice of this GameBoxscoreTeamPlayersStatsSkaterStats.


        :param short_handed_time_on_ice: The short_handed_time_on_ice of this GameBoxscoreTeamPlayersStatsSkaterStats.  # noqa: E501
        :type: str
        """

        self._short_handed_time_on_ice = short_handed_time_on_ice

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GameBoxscoreTeamPlayersStatsSkaterStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GameBoxscoreTeamPlayersStatsSkaterStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
