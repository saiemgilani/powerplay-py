# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlayerStatsSplits(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'season': 'str',
        'stat': 'PlayerStatsStat',
        'is_home': 'bool',
        'is_win': 'bool',
        'is_ot': 'bool',
        'month': 'float',
        'day_of_week': 'float',
        'opponent': 'DraftTeam',
        'opponent_division': 'PlayerStatsOpponentDivision',
        'opponent_conference': 'DivisionConference'
    }

    attribute_map = {
        'season': 'season',
        'stat': 'stat',
        'is_home': 'isHome',
        'is_win': 'isWin',
        'is_ot': 'isOT',
        'month': 'month',
        'day_of_week': 'dayOfWeek',
        'opponent': 'opponent',
        'opponent_division': 'opponentDivision',
        'opponent_conference': 'opponentConference'
    }

    def __init__(self, season=None, stat=None, is_home=None, is_win=None, is_ot=None, month=None, day_of_week=None, opponent=None, opponent_division=None, opponent_conference=None):  # noqa: E501
        """PlayerStatsSplits - a model defined in Swagger"""  # noqa: E501
        self._season = None
        self._stat = None
        self._is_home = None
        self._is_win = None
        self._is_ot = None
        self._month = None
        self._day_of_week = None
        self._opponent = None
        self._opponent_division = None
        self._opponent_conference = None
        self.discriminator = None
        if season is not None:
            self.season = season
        if stat is not None:
            self.stat = stat
        if is_home is not None:
            self.is_home = is_home
        if is_win is not None:
            self.is_win = is_win
        if is_ot is not None:
            self.is_ot = is_ot
        if month is not None:
            self.month = month
        if day_of_week is not None:
            self.day_of_week = day_of_week
        if opponent is not None:
            self.opponent = opponent
        if opponent_division is not None:
            self.opponent_division = opponent_division
        if opponent_conference is not None:
            self.opponent_conference = opponent_conference

    @property
    def season(self):
        """Gets the season of this PlayerStatsSplits.  # noqa: E501


        :return: The season of this PlayerStatsSplits.  # noqa: E501
        :rtype: str
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this PlayerStatsSplits.


        :param season: The season of this PlayerStatsSplits.  # noqa: E501
        :type: str
        """

        self._season = season

    @property
    def stat(self):
        """Gets the stat of this PlayerStatsSplits.  # noqa: E501


        :return: The stat of this PlayerStatsSplits.  # noqa: E501
        :rtype: PlayerStatsStat
        """
        return self._stat

    @stat.setter
    def stat(self, stat):
        """Sets the stat of this PlayerStatsSplits.


        :param stat: The stat of this PlayerStatsSplits.  # noqa: E501
        :type: PlayerStatsStat
        """

        self._stat = stat

    @property
    def is_home(self):
        """Gets the is_home of this PlayerStatsSplits.  # noqa: E501


        :return: The is_home of this PlayerStatsSplits.  # noqa: E501
        :rtype: bool
        """
        return self._is_home

    @is_home.setter
    def is_home(self, is_home):
        """Sets the is_home of this PlayerStatsSplits.


        :param is_home: The is_home of this PlayerStatsSplits.  # noqa: E501
        :type: bool
        """

        self._is_home = is_home

    @property
    def is_win(self):
        """Gets the is_win of this PlayerStatsSplits.  # noqa: E501


        :return: The is_win of this PlayerStatsSplits.  # noqa: E501
        :rtype: bool
        """
        return self._is_win

    @is_win.setter
    def is_win(self, is_win):
        """Sets the is_win of this PlayerStatsSplits.


        :param is_win: The is_win of this PlayerStatsSplits.  # noqa: E501
        :type: bool
        """

        self._is_win = is_win

    @property
    def is_ot(self):
        """Gets the is_ot of this PlayerStatsSplits.  # noqa: E501


        :return: The is_ot of this PlayerStatsSplits.  # noqa: E501
        :rtype: bool
        """
        return self._is_ot

    @is_ot.setter
    def is_ot(self, is_ot):
        """Sets the is_ot of this PlayerStatsSplits.


        :param is_ot: The is_ot of this PlayerStatsSplits.  # noqa: E501
        :type: bool
        """

        self._is_ot = is_ot

    @property
    def month(self):
        """Gets the month of this PlayerStatsSplits.  # noqa: E501


        :return: The month of this PlayerStatsSplits.  # noqa: E501
        :rtype: float
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this PlayerStatsSplits.


        :param month: The month of this PlayerStatsSplits.  # noqa: E501
        :type: float
        """

        self._month = month

    @property
    def day_of_week(self):
        """Gets the day_of_week of this PlayerStatsSplits.  # noqa: E501


        :return: The day_of_week of this PlayerStatsSplits.  # noqa: E501
        :rtype: float
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this PlayerStatsSplits.


        :param day_of_week: The day_of_week of this PlayerStatsSplits.  # noqa: E501
        :type: float
        """

        self._day_of_week = day_of_week

    @property
    def opponent(self):
        """Gets the opponent of this PlayerStatsSplits.  # noqa: E501


        :return: The opponent of this PlayerStatsSplits.  # noqa: E501
        :rtype: DraftTeam
        """
        return self._opponent

    @opponent.setter
    def opponent(self, opponent):
        """Sets the opponent of this PlayerStatsSplits.


        :param opponent: The opponent of this PlayerStatsSplits.  # noqa: E501
        :type: DraftTeam
        """

        self._opponent = opponent

    @property
    def opponent_division(self):
        """Gets the opponent_division of this PlayerStatsSplits.  # noqa: E501


        :return: The opponent_division of this PlayerStatsSplits.  # noqa: E501
        :rtype: PlayerStatsOpponentDivision
        """
        return self._opponent_division

    @opponent_division.setter
    def opponent_division(self, opponent_division):
        """Sets the opponent_division of this PlayerStatsSplits.


        :param opponent_division: The opponent_division of this PlayerStatsSplits.  # noqa: E501
        :type: PlayerStatsOpponentDivision
        """

        self._opponent_division = opponent_division

    @property
    def opponent_conference(self):
        """Gets the opponent_conference of this PlayerStatsSplits.  # noqa: E501


        :return: The opponent_conference of this PlayerStatsSplits.  # noqa: E501
        :rtype: DivisionConference
        """
        return self._opponent_conference

    @opponent_conference.setter
    def opponent_conference(self, opponent_conference):
        """Sets the opponent_conference of this PlayerStatsSplits.


        :param opponent_conference: The opponent_conference of this PlayerStatsSplits.  # noqa: E501
        :type: DivisionConference
        """

        self._opponent_conference = opponent_conference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlayerStatsSplits, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlayerStatsSplits):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
