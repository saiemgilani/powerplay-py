# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GamePeriodHome(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'goals': 'float',
        'shots_on_goal': 'float',
        'rink_side': 'str'
    }

    attribute_map = {
        'goals': 'goals',
        'shots_on_goal': 'shotsOnGoal',
        'rink_side': 'rinkSide'
    }

    def __init__(self, goals=None, shots_on_goal=None, rink_side=None):  # noqa: E501
        """GamePeriodHome - a model defined in Swagger"""  # noqa: E501
        self._goals = None
        self._shots_on_goal = None
        self._rink_side = None
        self.discriminator = None
        if goals is not None:
            self.goals = goals
        if shots_on_goal is not None:
            self.shots_on_goal = shots_on_goal
        if rink_side is not None:
            self.rink_side = rink_side

    @property
    def goals(self):
        """Gets the goals of this GamePeriodHome.  # noqa: E501


        :return: The goals of this GamePeriodHome.  # noqa: E501
        :rtype: float
        """
        return self._goals

    @goals.setter
    def goals(self, goals):
        """Sets the goals of this GamePeriodHome.


        :param goals: The goals of this GamePeriodHome.  # noqa: E501
        :type: float
        """

        self._goals = goals

    @property
    def shots_on_goal(self):
        """Gets the shots_on_goal of this GamePeriodHome.  # noqa: E501


        :return: The shots_on_goal of this GamePeriodHome.  # noqa: E501
        :rtype: float
        """
        return self._shots_on_goal

    @shots_on_goal.setter
    def shots_on_goal(self, shots_on_goal):
        """Sets the shots_on_goal of this GamePeriodHome.


        :param shots_on_goal: The shots_on_goal of this GamePeriodHome.  # noqa: E501
        :type: float
        """

        self._shots_on_goal = shots_on_goal

    @property
    def rink_side(self):
        """Gets the rink_side of this GamePeriodHome.  # noqa: E501


        :return: The rink_side of this GamePeriodHome.  # noqa: E501
        :rtype: str
        """
        return self._rink_side

    @rink_side.setter
    def rink_side(self, rink_side):
        """Sets the rink_side of this GamePeriodHome.


        :param rink_side: The rink_side of this GamePeriodHome.  # noqa: E501
        :type: str
        """

        self._rink_side = rink_side

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GamePeriodHome, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GamePeriodHome):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
