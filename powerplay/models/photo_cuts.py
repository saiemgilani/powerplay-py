# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PhotoCuts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aspect_ratio': 'str',
        'width': 'float',
        'height': 'float',
        'src': 'str',
        'at2x': 'str',
        'at3x': 'str'
    }

    attribute_map = {
        'aspect_ratio': 'aspectRatio',
        'width': 'width',
        'height': 'height',
        'src': 'src',
        'at2x': 'at2x',
        'at3x': 'at3x'
    }

    def __init__(self, aspect_ratio=None, width=None, height=None, src=None, at2x=None, at3x=None):  # noqa: E501
        """PhotoCuts - a model defined in Swagger"""  # noqa: E501
        self._aspect_ratio = None
        self._width = None
        self._height = None
        self._src = None
        self._at2x = None
        self._at3x = None
        self.discriminator = None
        if aspect_ratio is not None:
            self.aspect_ratio = aspect_ratio
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if src is not None:
            self.src = src
        if at2x is not None:
            self.at2x = at2x
        if at3x is not None:
            self.at3x = at3x

    @property
    def aspect_ratio(self):
        """Gets the aspect_ratio of this PhotoCuts.  # noqa: E501


        :return: The aspect_ratio of this PhotoCuts.  # noqa: E501
        :rtype: str
        """
        return self._aspect_ratio

    @aspect_ratio.setter
    def aspect_ratio(self, aspect_ratio):
        """Sets the aspect_ratio of this PhotoCuts.


        :param aspect_ratio: The aspect_ratio of this PhotoCuts.  # noqa: E501
        :type: str
        """

        self._aspect_ratio = aspect_ratio

    @property
    def width(self):
        """Gets the width of this PhotoCuts.  # noqa: E501


        :return: The width of this PhotoCuts.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this PhotoCuts.


        :param width: The width of this PhotoCuts.  # noqa: E501
        :type: float
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this PhotoCuts.  # noqa: E501


        :return: The height of this PhotoCuts.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this PhotoCuts.


        :param height: The height of this PhotoCuts.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def src(self):
        """Gets the src of this PhotoCuts.  # noqa: E501


        :return: The src of this PhotoCuts.  # noqa: E501
        :rtype: str
        """
        return self._src

    @src.setter
    def src(self, src):
        """Sets the src of this PhotoCuts.


        :param src: The src of this PhotoCuts.  # noqa: E501
        :type: str
        """

        self._src = src

    @property
    def at2x(self):
        """Gets the at2x of this PhotoCuts.  # noqa: E501


        :return: The at2x of this PhotoCuts.  # noqa: E501
        :rtype: str
        """
        return self._at2x

    @at2x.setter
    def at2x(self, at2x):
        """Sets the at2x of this PhotoCuts.


        :param at2x: The at2x of this PhotoCuts.  # noqa: E501
        :type: str
        """

        self._at2x = at2x

    @property
    def at3x(self):
        """Gets the at3x of this PhotoCuts.  # noqa: E501


        :return: The at3x of this PhotoCuts.  # noqa: E501
        :rtype: str
        """
        return self._at3x

    @at3x.setter
    def at3x(self, at3x):
        """Sets the at3x of this PhotoCuts.


        :param at3x: The at3x of this PhotoCuts.  # noqa: E501
        :type: str
        """

        self._at3x = at3x

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PhotoCuts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhotoCuts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
