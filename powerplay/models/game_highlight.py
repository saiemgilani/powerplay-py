# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GameHighlight(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id': 'str',
        '_date': 'datetime',
        'title': 'str',
        'blurb': 'str',
        'description': 'str',
        'duration': 'str',
        'auth_flow': 'bool',
        'media_playback_id': 'str',
        'media_state': 'str',
        'keywords': 'list[GameEditorialKeyword]',
        'image': 'Photo',
        'playbacks': 'list[GameHighlightPlaybacks]'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        '_date': 'date',
        'title': 'title',
        'blurb': 'blurb',
        'description': 'description',
        'duration': 'duration',
        'auth_flow': 'authFlow',
        'media_playback_id': 'mediaPlaybackId',
        'media_state': 'mediaState',
        'keywords': 'keywords',
        'image': 'image',
        'playbacks': 'playbacks'
    }

    def __init__(self, type=None, id=None, _date=None, title=None, blurb=None, description=None, duration=None, auth_flow=None, media_playback_id=None, media_state=None, keywords=None, image=None, playbacks=None):  # noqa: E501
        """GameHighlight - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._id = None
        self.__date = None
        self._title = None
        self._blurb = None
        self._description = None
        self._duration = None
        self._auth_flow = None
        self._media_playback_id = None
        self._media_state = None
        self._keywords = None
        self._image = None
        self._playbacks = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if id is not None:
            self.id = id
        if _date is not None:
            self._date = _date
        if title is not None:
            self.title = title
        if blurb is not None:
            self.blurb = blurb
        if description is not None:
            self.description = description
        if duration is not None:
            self.duration = duration
        if auth_flow is not None:
            self.auth_flow = auth_flow
        if media_playback_id is not None:
            self.media_playback_id = media_playback_id
        if media_state is not None:
            self.media_state = media_state
        if keywords is not None:
            self.keywords = keywords
        if image is not None:
            self.image = image
        if playbacks is not None:
            self.playbacks = playbacks

    @property
    def type(self):
        """Gets the type of this GameHighlight.  # noqa: E501


        :return: The type of this GameHighlight.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GameHighlight.


        :param type: The type of this GameHighlight.  # noqa: E501
        :type: str
        """
        allowed_values = ["video"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """Gets the id of this GameHighlight.  # noqa: E501


        :return: The id of this GameHighlight.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GameHighlight.


        :param id: The id of this GameHighlight.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def _date(self):
        """Gets the _date of this GameHighlight.  # noqa: E501


        :return: The _date of this GameHighlight.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this GameHighlight.


        :param _date: The _date of this GameHighlight.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def title(self):
        """Gets the title of this GameHighlight.  # noqa: E501


        :return: The title of this GameHighlight.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GameHighlight.


        :param title: The title of this GameHighlight.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def blurb(self):
        """Gets the blurb of this GameHighlight.  # noqa: E501


        :return: The blurb of this GameHighlight.  # noqa: E501
        :rtype: str
        """
        return self._blurb

    @blurb.setter
    def blurb(self, blurb):
        """Sets the blurb of this GameHighlight.


        :param blurb: The blurb of this GameHighlight.  # noqa: E501
        :type: str
        """

        self._blurb = blurb

    @property
    def description(self):
        """Gets the description of this GameHighlight.  # noqa: E501


        :return: The description of this GameHighlight.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GameHighlight.


        :param description: The description of this GameHighlight.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def duration(self):
        """Gets the duration of this GameHighlight.  # noqa: E501


        :return: The duration of this GameHighlight.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this GameHighlight.


        :param duration: The duration of this GameHighlight.  # noqa: E501
        :type: str
        """

        self._duration = duration

    @property
    def auth_flow(self):
        """Gets the auth_flow of this GameHighlight.  # noqa: E501


        :return: The auth_flow of this GameHighlight.  # noqa: E501
        :rtype: bool
        """
        return self._auth_flow

    @auth_flow.setter
    def auth_flow(self, auth_flow):
        """Sets the auth_flow of this GameHighlight.


        :param auth_flow: The auth_flow of this GameHighlight.  # noqa: E501
        :type: bool
        """

        self._auth_flow = auth_flow

    @property
    def media_playback_id(self):
        """Gets the media_playback_id of this GameHighlight.  # noqa: E501


        :return: The media_playback_id of this GameHighlight.  # noqa: E501
        :rtype: str
        """
        return self._media_playback_id

    @media_playback_id.setter
    def media_playback_id(self, media_playback_id):
        """Sets the media_playback_id of this GameHighlight.


        :param media_playback_id: The media_playback_id of this GameHighlight.  # noqa: E501
        :type: str
        """

        self._media_playback_id = media_playback_id

    @property
    def media_state(self):
        """Gets the media_state of this GameHighlight.  # noqa: E501


        :return: The media_state of this GameHighlight.  # noqa: E501
        :rtype: str
        """
        return self._media_state

    @media_state.setter
    def media_state(self, media_state):
        """Sets the media_state of this GameHighlight.


        :param media_state: The media_state of this GameHighlight.  # noqa: E501
        :type: str
        """

        self._media_state = media_state

    @property
    def keywords(self):
        """Gets the keywords of this GameHighlight.  # noqa: E501


        :return: The keywords of this GameHighlight.  # noqa: E501
        :rtype: list[GameEditorialKeyword]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this GameHighlight.


        :param keywords: The keywords of this GameHighlight.  # noqa: E501
        :type: list[GameEditorialKeyword]
        """

        self._keywords = keywords

    @property
    def image(self):
        """Gets the image of this GameHighlight.  # noqa: E501


        :return: The image of this GameHighlight.  # noqa: E501
        :rtype: Photo
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this GameHighlight.


        :param image: The image of this GameHighlight.  # noqa: E501
        :type: Photo
        """

        self._image = image

    @property
    def playbacks(self):
        """Gets the playbacks of this GameHighlight.  # noqa: E501


        :return: The playbacks of this GameHighlight.  # noqa: E501
        :rtype: list[GameHighlightPlaybacks]
        """
        return self._playbacks

    @playbacks.setter
    def playbacks(self, playbacks):
        """Sets the playbacks of this GameHighlight.


        :param playbacks: The playbacks of this GameHighlight.  # noqa: E501
        :type: list[GameHighlightPlaybacks]
        """

        self._playbacks = playbacks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GameHighlight, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GameHighlight):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
