# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GameEditorialTokenData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token_guid': 'str',
        'type': 'str',
        'id': 'str',
        'team_id': 'str',
        'name': 'str',
        'seo_name': 'str',
        'href': 'str',
        'href_mobile': 'str'
    }

    attribute_map = {
        'token_guid': 'tokenGUID',
        'type': 'type',
        'id': 'id',
        'team_id': 'teamId',
        'name': 'name',
        'seo_name': 'seoName',
        'href': 'href',
        'href_mobile': 'hrefMobile'
    }

    def __init__(self, token_guid=None, type=None, id=None, team_id=None, name=None, seo_name=None, href=None, href_mobile=None):  # noqa: E501
        """GameEditorialTokenData - a model defined in Swagger"""  # noqa: E501
        self._token_guid = None
        self._type = None
        self._id = None
        self._team_id = None
        self._name = None
        self._seo_name = None
        self._href = None
        self._href_mobile = None
        self.discriminator = None
        if token_guid is not None:
            self.token_guid = token_guid
        if type is not None:
            self.type = type
        if id is not None:
            self.id = id
        if team_id is not None:
            self.team_id = team_id
        if name is not None:
            self.name = name
        if seo_name is not None:
            self.seo_name = seo_name
        if href is not None:
            self.href = href
        if href_mobile is not None:
            self.href_mobile = href_mobile

    @property
    def token_guid(self):
        """Gets the token_guid of this GameEditorialTokenData.  # noqa: E501


        :return: The token_guid of this GameEditorialTokenData.  # noqa: E501
        :rtype: str
        """
        return self._token_guid

    @token_guid.setter
    def token_guid(self, token_guid):
        """Sets the token_guid of this GameEditorialTokenData.


        :param token_guid: The token_guid of this GameEditorialTokenData.  # noqa: E501
        :type: str
        """

        self._token_guid = token_guid

    @property
    def type(self):
        """Gets the type of this GameEditorialTokenData.  # noqa: E501


        :return: The type of this GameEditorialTokenData.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GameEditorialTokenData.


        :param type: The type of this GameEditorialTokenData.  # noqa: E501
        :type: str
        """
        allowed_values = ["hyperLink", "playerCard"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """Gets the id of this GameEditorialTokenData.  # noqa: E501


        :return: The id of this GameEditorialTokenData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GameEditorialTokenData.


        :param id: The id of this GameEditorialTokenData.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def team_id(self):
        """Gets the team_id of this GameEditorialTokenData.  # noqa: E501


        :return: The team_id of this GameEditorialTokenData.  # noqa: E501
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this GameEditorialTokenData.


        :param team_id: The team_id of this GameEditorialTokenData.  # noqa: E501
        :type: str
        """

        self._team_id = team_id

    @property
    def name(self):
        """Gets the name of this GameEditorialTokenData.  # noqa: E501


        :return: The name of this GameEditorialTokenData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GameEditorialTokenData.


        :param name: The name of this GameEditorialTokenData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def seo_name(self):
        """Gets the seo_name of this GameEditorialTokenData.  # noqa: E501


        :return: The seo_name of this GameEditorialTokenData.  # noqa: E501
        :rtype: str
        """
        return self._seo_name

    @seo_name.setter
    def seo_name(self, seo_name):
        """Sets the seo_name of this GameEditorialTokenData.


        :param seo_name: The seo_name of this GameEditorialTokenData.  # noqa: E501
        :type: str
        """

        self._seo_name = seo_name

    @property
    def href(self):
        """Gets the href of this GameEditorialTokenData.  # noqa: E501


        :return: The href of this GameEditorialTokenData.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this GameEditorialTokenData.


        :param href: The href of this GameEditorialTokenData.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def href_mobile(self):
        """Gets the href_mobile of this GameEditorialTokenData.  # noqa: E501


        :return: The href_mobile of this GameEditorialTokenData.  # noqa: E501
        :rtype: str
        """
        return self._href_mobile

    @href_mobile.setter
    def href_mobile(self, href_mobile):
        """Sets the href_mobile of this GameEditorialTokenData.


        :param href_mobile: The href_mobile of this GameEditorialTokenData.  # noqa: E501
        :type: str
        """

        self._href_mobile = href_mobile

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GameEditorialTokenData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GameEditorialTokenData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
