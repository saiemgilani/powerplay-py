# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StandingsTeamRecords(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'team': 'PlayerCurrentTeam',
        'league_record': 'ScheduleGameTeamsHomeLeagueRecord',
        'goals_against': 'float',
        'goals_scored': 'float',
        'points': 'float',
        'division_rank': 'str',
        'conference_rank': 'str',
        'league_rank': 'str',
        'wild_card_rank': 'str',
        'row': 'float',
        'games_played': 'float',
        'streak': 'StandingsStreak',
        'last_updated': 'datetime'
    }

    attribute_map = {
        'team': 'team',
        'league_record': 'leagueRecord',
        'goals_against': 'goalsAgainst',
        'goals_scored': 'goalsScored',
        'points': 'points',
        'division_rank': 'divisionRank',
        'conference_rank': 'conferenceRank',
        'league_rank': 'leagueRank',
        'wild_card_rank': 'wildCardRank',
        'row': 'row',
        'games_played': 'gamesPlayed',
        'streak': 'streak',
        'last_updated': 'lastUpdated'
    }

    def __init__(self, team=None, league_record=None, goals_against=None, goals_scored=None, points=None, division_rank=None, conference_rank=None, league_rank=None, wild_card_rank=None, row=None, games_played=None, streak=None, last_updated=None):  # noqa: E501
        """StandingsTeamRecords - a model defined in Swagger"""  # noqa: E501
        self._team = None
        self._league_record = None
        self._goals_against = None
        self._goals_scored = None
        self._points = None
        self._division_rank = None
        self._conference_rank = None
        self._league_rank = None
        self._wild_card_rank = None
        self._row = None
        self._games_played = None
        self._streak = None
        self._last_updated = None
        self.discriminator = None
        if team is not None:
            self.team = team
        if league_record is not None:
            self.league_record = league_record
        if goals_against is not None:
            self.goals_against = goals_against
        if goals_scored is not None:
            self.goals_scored = goals_scored
        if points is not None:
            self.points = points
        if division_rank is not None:
            self.division_rank = division_rank
        if conference_rank is not None:
            self.conference_rank = conference_rank
        if league_rank is not None:
            self.league_rank = league_rank
        if wild_card_rank is not None:
            self.wild_card_rank = wild_card_rank
        if row is not None:
            self.row = row
        if games_played is not None:
            self.games_played = games_played
        if streak is not None:
            self.streak = streak
        if last_updated is not None:
            self.last_updated = last_updated

    @property
    def team(self):
        """Gets the team of this StandingsTeamRecords.  # noqa: E501


        :return: The team of this StandingsTeamRecords.  # noqa: E501
        :rtype: PlayerCurrentTeam
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this StandingsTeamRecords.


        :param team: The team of this StandingsTeamRecords.  # noqa: E501
        :type: PlayerCurrentTeam
        """

        self._team = team

    @property
    def league_record(self):
        """Gets the league_record of this StandingsTeamRecords.  # noqa: E501


        :return: The league_record of this StandingsTeamRecords.  # noqa: E501
        :rtype: ScheduleGameTeamsHomeLeagueRecord
        """
        return self._league_record

    @league_record.setter
    def league_record(self, league_record):
        """Sets the league_record of this StandingsTeamRecords.


        :param league_record: The league_record of this StandingsTeamRecords.  # noqa: E501
        :type: ScheduleGameTeamsHomeLeagueRecord
        """

        self._league_record = league_record

    @property
    def goals_against(self):
        """Gets the goals_against of this StandingsTeamRecords.  # noqa: E501


        :return: The goals_against of this StandingsTeamRecords.  # noqa: E501
        :rtype: float
        """
        return self._goals_against

    @goals_against.setter
    def goals_against(self, goals_against):
        """Sets the goals_against of this StandingsTeamRecords.


        :param goals_against: The goals_against of this StandingsTeamRecords.  # noqa: E501
        :type: float
        """

        self._goals_against = goals_against

    @property
    def goals_scored(self):
        """Gets the goals_scored of this StandingsTeamRecords.  # noqa: E501


        :return: The goals_scored of this StandingsTeamRecords.  # noqa: E501
        :rtype: float
        """
        return self._goals_scored

    @goals_scored.setter
    def goals_scored(self, goals_scored):
        """Sets the goals_scored of this StandingsTeamRecords.


        :param goals_scored: The goals_scored of this StandingsTeamRecords.  # noqa: E501
        :type: float
        """

        self._goals_scored = goals_scored

    @property
    def points(self):
        """Gets the points of this StandingsTeamRecords.  # noqa: E501


        :return: The points of this StandingsTeamRecords.  # noqa: E501
        :rtype: float
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this StandingsTeamRecords.


        :param points: The points of this StandingsTeamRecords.  # noqa: E501
        :type: float
        """

        self._points = points

    @property
    def division_rank(self):
        """Gets the division_rank of this StandingsTeamRecords.  # noqa: E501


        :return: The division_rank of this StandingsTeamRecords.  # noqa: E501
        :rtype: str
        """
        return self._division_rank

    @division_rank.setter
    def division_rank(self, division_rank):
        """Sets the division_rank of this StandingsTeamRecords.


        :param division_rank: The division_rank of this StandingsTeamRecords.  # noqa: E501
        :type: str
        """

        self._division_rank = division_rank

    @property
    def conference_rank(self):
        """Gets the conference_rank of this StandingsTeamRecords.  # noqa: E501


        :return: The conference_rank of this StandingsTeamRecords.  # noqa: E501
        :rtype: str
        """
        return self._conference_rank

    @conference_rank.setter
    def conference_rank(self, conference_rank):
        """Sets the conference_rank of this StandingsTeamRecords.


        :param conference_rank: The conference_rank of this StandingsTeamRecords.  # noqa: E501
        :type: str
        """

        self._conference_rank = conference_rank

    @property
    def league_rank(self):
        """Gets the league_rank of this StandingsTeamRecords.  # noqa: E501


        :return: The league_rank of this StandingsTeamRecords.  # noqa: E501
        :rtype: str
        """
        return self._league_rank

    @league_rank.setter
    def league_rank(self, league_rank):
        """Sets the league_rank of this StandingsTeamRecords.


        :param league_rank: The league_rank of this StandingsTeamRecords.  # noqa: E501
        :type: str
        """

        self._league_rank = league_rank

    @property
    def wild_card_rank(self):
        """Gets the wild_card_rank of this StandingsTeamRecords.  # noqa: E501


        :return: The wild_card_rank of this StandingsTeamRecords.  # noqa: E501
        :rtype: str
        """
        return self._wild_card_rank

    @wild_card_rank.setter
    def wild_card_rank(self, wild_card_rank):
        """Sets the wild_card_rank of this StandingsTeamRecords.


        :param wild_card_rank: The wild_card_rank of this StandingsTeamRecords.  # noqa: E501
        :type: str
        """

        self._wild_card_rank = wild_card_rank

    @property
    def row(self):
        """Gets the row of this StandingsTeamRecords.  # noqa: E501


        :return: The row of this StandingsTeamRecords.  # noqa: E501
        :rtype: float
        """
        return self._row

    @row.setter
    def row(self, row):
        """Sets the row of this StandingsTeamRecords.


        :param row: The row of this StandingsTeamRecords.  # noqa: E501
        :type: float
        """

        self._row = row

    @property
    def games_played(self):
        """Gets the games_played of this StandingsTeamRecords.  # noqa: E501


        :return: The games_played of this StandingsTeamRecords.  # noqa: E501
        :rtype: float
        """
        return self._games_played

    @games_played.setter
    def games_played(self, games_played):
        """Sets the games_played of this StandingsTeamRecords.


        :param games_played: The games_played of this StandingsTeamRecords.  # noqa: E501
        :type: float
        """

        self._games_played = games_played

    @property
    def streak(self):
        """Gets the streak of this StandingsTeamRecords.  # noqa: E501


        :return: The streak of this StandingsTeamRecords.  # noqa: E501
        :rtype: StandingsStreak
        """
        return self._streak

    @streak.setter
    def streak(self, streak):
        """Sets the streak of this StandingsTeamRecords.


        :param streak: The streak of this StandingsTeamRecords.  # noqa: E501
        :type: StandingsStreak
        """

        self._streak = streak

    @property
    def last_updated(self):
        """Gets the last_updated of this StandingsTeamRecords.  # noqa: E501


        :return: The last_updated of this StandingsTeamRecords.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this StandingsTeamRecords.


        :param last_updated: The last_updated of this StandingsTeamRecords.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StandingsTeamRecords, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StandingsTeamRecords):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
