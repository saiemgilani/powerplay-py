# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Player(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'full_name': 'str',
        'link': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'primary_number': 'str',
        'birth_date': 'date',
        'current_age': 'float',
        'birth_city': 'str',
        'birth_state_province': 'str',
        'birth_country': 'str',
        'nationality': 'str',
        'height': 'str',
        'weight': 'float',
        'active': 'bool',
        'alternate_captain': 'bool',
        'captain': 'bool',
        'rookie': 'bool',
        'shoots_catches': 'str',
        'roster_status': 'str',
        'current_team': 'PlayerCurrentTeam',
        'primary_position': 'DraftProspectPrimaryPosition'
    }

    attribute_map = {
        'id': 'id',
        'full_name': 'fullName',
        'link': 'link',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'primary_number': 'primaryNumber',
        'birth_date': 'birthDate',
        'current_age': 'currentAge',
        'birth_city': 'birthCity',
        'birth_state_province': 'birthStateProvince',
        'birth_country': 'birthCountry',
        'nationality': 'nationality',
        'height': 'height',
        'weight': 'weight',
        'active': 'active',
        'alternate_captain': 'alternateCaptain',
        'captain': 'captain',
        'rookie': 'rookie',
        'shoots_catches': 'shootsCatches',
        'roster_status': 'rosterStatus',
        'current_team': 'currentTeam',
        'primary_position': 'primaryPosition'
    }

    def __init__(self, id=None, full_name=None, link=None, first_name=None, last_name=None, primary_number=None, birth_date=None, current_age=None, birth_city=None, birth_state_province=None, birth_country=None, nationality=None, height=None, weight=None, active=None, alternate_captain=None, captain=None, rookie=None, shoots_catches=None, roster_status=None, current_team=None, primary_position=None):  # noqa: E501
        """Player - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._full_name = None
        self._link = None
        self._first_name = None
        self._last_name = None
        self._primary_number = None
        self._birth_date = None
        self._current_age = None
        self._birth_city = None
        self._birth_state_province = None
        self._birth_country = None
        self._nationality = None
        self._height = None
        self._weight = None
        self._active = None
        self._alternate_captain = None
        self._captain = None
        self._rookie = None
        self._shoots_catches = None
        self._roster_status = None
        self._current_team = None
        self._primary_position = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if full_name is not None:
            self.full_name = full_name
        if link is not None:
            self.link = link
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if primary_number is not None:
            self.primary_number = primary_number
        if birth_date is not None:
            self.birth_date = birth_date
        if current_age is not None:
            self.current_age = current_age
        if birth_city is not None:
            self.birth_city = birth_city
        if birth_state_province is not None:
            self.birth_state_province = birth_state_province
        if birth_country is not None:
            self.birth_country = birth_country
        if nationality is not None:
            self.nationality = nationality
        if height is not None:
            self.height = height
        if weight is not None:
            self.weight = weight
        if active is not None:
            self.active = active
        if alternate_captain is not None:
            self.alternate_captain = alternate_captain
        if captain is not None:
            self.captain = captain
        if rookie is not None:
            self.rookie = rookie
        if shoots_catches is not None:
            self.shoots_catches = shoots_catches
        if roster_status is not None:
            self.roster_status = roster_status
        if current_team is not None:
            self.current_team = current_team
        if primary_position is not None:
            self.primary_position = primary_position

    @property
    def id(self):
        """Gets the id of this Player.  # noqa: E501


        :return: The id of this Player.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Player.


        :param id: The id of this Player.  # noqa: E501
        :type: float
        """

        self._id = id

    @property
    def full_name(self):
        """Gets the full_name of this Player.  # noqa: E501


        :return: The full_name of this Player.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this Player.


        :param full_name: The full_name of this Player.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def link(self):
        """Gets the link of this Player.  # noqa: E501


        :return: The link of this Player.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Player.


        :param link: The link of this Player.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def first_name(self):
        """Gets the first_name of this Player.  # noqa: E501


        :return: The first_name of this Player.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Player.


        :param first_name: The first_name of this Player.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Player.  # noqa: E501


        :return: The last_name of this Player.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Player.


        :param last_name: The last_name of this Player.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def primary_number(self):
        """Gets the primary_number of this Player.  # noqa: E501


        :return: The primary_number of this Player.  # noqa: E501
        :rtype: str
        """
        return self._primary_number

    @primary_number.setter
    def primary_number(self, primary_number):
        """Sets the primary_number of this Player.


        :param primary_number: The primary_number of this Player.  # noqa: E501
        :type: str
        """

        self._primary_number = primary_number

    @property
    def birth_date(self):
        """Gets the birth_date of this Player.  # noqa: E501


        :return: The birth_date of this Player.  # noqa: E501
        :rtype: date
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this Player.


        :param birth_date: The birth_date of this Player.  # noqa: E501
        :type: date
        """

        self._birth_date = birth_date

    @property
    def current_age(self):
        """Gets the current_age of this Player.  # noqa: E501


        :return: The current_age of this Player.  # noqa: E501
        :rtype: float
        """
        return self._current_age

    @current_age.setter
    def current_age(self, current_age):
        """Sets the current_age of this Player.


        :param current_age: The current_age of this Player.  # noqa: E501
        :type: float
        """

        self._current_age = current_age

    @property
    def birth_city(self):
        """Gets the birth_city of this Player.  # noqa: E501


        :return: The birth_city of this Player.  # noqa: E501
        :rtype: str
        """
        return self._birth_city

    @birth_city.setter
    def birth_city(self, birth_city):
        """Sets the birth_city of this Player.


        :param birth_city: The birth_city of this Player.  # noqa: E501
        :type: str
        """

        self._birth_city = birth_city

    @property
    def birth_state_province(self):
        """Gets the birth_state_province of this Player.  # noqa: E501


        :return: The birth_state_province of this Player.  # noqa: E501
        :rtype: str
        """
        return self._birth_state_province

    @birth_state_province.setter
    def birth_state_province(self, birth_state_province):
        """Sets the birth_state_province of this Player.


        :param birth_state_province: The birth_state_province of this Player.  # noqa: E501
        :type: str
        """

        self._birth_state_province = birth_state_province

    @property
    def birth_country(self):
        """Gets the birth_country of this Player.  # noqa: E501


        :return: The birth_country of this Player.  # noqa: E501
        :rtype: str
        """
        return self._birth_country

    @birth_country.setter
    def birth_country(self, birth_country):
        """Sets the birth_country of this Player.


        :param birth_country: The birth_country of this Player.  # noqa: E501
        :type: str
        """

        self._birth_country = birth_country

    @property
    def nationality(self):
        """Gets the nationality of this Player.  # noqa: E501


        :return: The nationality of this Player.  # noqa: E501
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this Player.


        :param nationality: The nationality of this Player.  # noqa: E501
        :type: str
        """

        self._nationality = nationality

    @property
    def height(self):
        """Gets the height of this Player.  # noqa: E501


        :return: The height of this Player.  # noqa: E501
        :rtype: str
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Player.


        :param height: The height of this Player.  # noqa: E501
        :type: str
        """

        self._height = height

    @property
    def weight(self):
        """Gets the weight of this Player.  # noqa: E501


        :return: The weight of this Player.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Player.


        :param weight: The weight of this Player.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def active(self):
        """Gets the active of this Player.  # noqa: E501


        :return: The active of this Player.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Player.


        :param active: The active of this Player.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def alternate_captain(self):
        """Gets the alternate_captain of this Player.  # noqa: E501


        :return: The alternate_captain of this Player.  # noqa: E501
        :rtype: bool
        """
        return self._alternate_captain

    @alternate_captain.setter
    def alternate_captain(self, alternate_captain):
        """Sets the alternate_captain of this Player.


        :param alternate_captain: The alternate_captain of this Player.  # noqa: E501
        :type: bool
        """

        self._alternate_captain = alternate_captain

    @property
    def captain(self):
        """Gets the captain of this Player.  # noqa: E501


        :return: The captain of this Player.  # noqa: E501
        :rtype: bool
        """
        return self._captain

    @captain.setter
    def captain(self, captain):
        """Sets the captain of this Player.


        :param captain: The captain of this Player.  # noqa: E501
        :type: bool
        """

        self._captain = captain

    @property
    def rookie(self):
        """Gets the rookie of this Player.  # noqa: E501


        :return: The rookie of this Player.  # noqa: E501
        :rtype: bool
        """
        return self._rookie

    @rookie.setter
    def rookie(self, rookie):
        """Sets the rookie of this Player.


        :param rookie: The rookie of this Player.  # noqa: E501
        :type: bool
        """

        self._rookie = rookie

    @property
    def shoots_catches(self):
        """Gets the shoots_catches of this Player.  # noqa: E501


        :return: The shoots_catches of this Player.  # noqa: E501
        :rtype: str
        """
        return self._shoots_catches

    @shoots_catches.setter
    def shoots_catches(self, shoots_catches):
        """Sets the shoots_catches of this Player.


        :param shoots_catches: The shoots_catches of this Player.  # noqa: E501
        :type: str
        """
        allowed_values = ["L", "R"]  # noqa: E501
        if shoots_catches not in allowed_values:
            raise ValueError(
                "Invalid value for `shoots_catches` ({0}), must be one of {1}"  # noqa: E501
                .format(shoots_catches, allowed_values)
            )

        self._shoots_catches = shoots_catches

    @property
    def roster_status(self):
        """Gets the roster_status of this Player.  # noqa: E501


        :return: The roster_status of this Player.  # noqa: E501
        :rtype: str
        """
        return self._roster_status

    @roster_status.setter
    def roster_status(self, roster_status):
        """Sets the roster_status of this Player.


        :param roster_status: The roster_status of this Player.  # noqa: E501
        :type: str
        """

        self._roster_status = roster_status

    @property
    def current_team(self):
        """Gets the current_team of this Player.  # noqa: E501


        :return: The current_team of this Player.  # noqa: E501
        :rtype: PlayerCurrentTeam
        """
        return self._current_team

    @current_team.setter
    def current_team(self, current_team):
        """Sets the current_team of this Player.


        :param current_team: The current_team of this Player.  # noqa: E501
        :type: PlayerCurrentTeam
        """

        self._current_team = current_team

    @property
    def primary_position(self):
        """Gets the primary_position of this Player.  # noqa: E501


        :return: The primary_position of this Player.  # noqa: E501
        :rtype: DraftProspectPrimaryPosition
        """
        return self._primary_position

    @primary_position.setter
    def primary_position(self, primary_position):
        """Sets the primary_position of this Player.


        :param primary_position: The primary_position of this Player.  # noqa: E501
        :type: DraftProspectPrimaryPosition
        """

        self._primary_position = primary_position

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Player, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Player):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
