# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GameEditorial(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'state': 'str',
        '_date': 'datetime',
        'id': 'str',
        'headline': 'str',
        'subhead': 'str',
        'seo_title': 'str',
        'seo_description': 'str',
        'seo_keywords': 'str',
        'slug': 'str',
        'commenting': 'bool',
        'tagline': 'str',
        'token_data': 'GameEditorialTokenData',
        'contributor': 'GameEditorialContributor',
        'keywords_display': 'list[GameEditorialKeyword]',
        'keywords_all': 'list[GameEditorialKeyword]',
        'approval': 'str',
        'url': 'str',
        'data_uri': 'str',
        'primary_keyword': 'GameEditorialKeyword',
        'media': 'GameEditorialMedia',
        'preview': 'str'
    }

    attribute_map = {
        'type': 'type',
        'state': 'state',
        '_date': 'date',
        'id': 'id',
        'headline': 'headline',
        'subhead': 'subhead',
        'seo_title': 'seoTitle',
        'seo_description': 'seoDescription',
        'seo_keywords': 'seoKeywords',
        'slug': 'slug',
        'commenting': 'commenting',
        'tagline': 'tagline',
        'token_data': 'tokenData',
        'contributor': 'contributor',
        'keywords_display': 'keywordsDisplay',
        'keywords_all': 'keywordsAll',
        'approval': 'approval',
        'url': 'url',
        'data_uri': 'dataURI',
        'primary_keyword': 'primaryKeyword',
        'media': 'media',
        'preview': 'preview'
    }

    def __init__(self, type=None, state=None, _date=None, id=None, headline=None, subhead=None, seo_title=None, seo_description=None, seo_keywords=None, slug=None, commenting=None, tagline=None, token_data=None, contributor=None, keywords_display=None, keywords_all=None, approval=None, url=None, data_uri=None, primary_keyword=None, media=None, preview=None):  # noqa: E501
        """GameEditorial - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._state = None
        self.__date = None
        self._id = None
        self._headline = None
        self._subhead = None
        self._seo_title = None
        self._seo_description = None
        self._seo_keywords = None
        self._slug = None
        self._commenting = None
        self._tagline = None
        self._token_data = None
        self._contributor = None
        self._keywords_display = None
        self._keywords_all = None
        self._approval = None
        self._url = None
        self._data_uri = None
        self._primary_keyword = None
        self._media = None
        self._preview = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if state is not None:
            self.state = state
        if _date is not None:
            self._date = _date
        if id is not None:
            self.id = id
        if headline is not None:
            self.headline = headline
        if subhead is not None:
            self.subhead = subhead
        if seo_title is not None:
            self.seo_title = seo_title
        if seo_description is not None:
            self.seo_description = seo_description
        if seo_keywords is not None:
            self.seo_keywords = seo_keywords
        if slug is not None:
            self.slug = slug
        if commenting is not None:
            self.commenting = commenting
        if tagline is not None:
            self.tagline = tagline
        if token_data is not None:
            self.token_data = token_data
        if contributor is not None:
            self.contributor = contributor
        if keywords_display is not None:
            self.keywords_display = keywords_display
        if keywords_all is not None:
            self.keywords_all = keywords_all
        if approval is not None:
            self.approval = approval
        if url is not None:
            self.url = url
        if data_uri is not None:
            self.data_uri = data_uri
        if primary_keyword is not None:
            self.primary_keyword = primary_keyword
        if media is not None:
            self.media = media
        if preview is not None:
            self.preview = preview

    @property
    def type(self):
        """Gets the type of this GameEditorial.  # noqa: E501


        :return: The type of this GameEditorial.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GameEditorial.


        :param type: The type of this GameEditorial.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def state(self):
        """Gets the state of this GameEditorial.  # noqa: E501


        :return: The state of this GameEditorial.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GameEditorial.


        :param state: The state of this GameEditorial.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def _date(self):
        """Gets the _date of this GameEditorial.  # noqa: E501


        :return: The _date of this GameEditorial.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this GameEditorial.


        :param _date: The _date of this GameEditorial.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def id(self):
        """Gets the id of this GameEditorial.  # noqa: E501


        :return: The id of this GameEditorial.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GameEditorial.


        :param id: The id of this GameEditorial.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def headline(self):
        """Gets the headline of this GameEditorial.  # noqa: E501


        :return: The headline of this GameEditorial.  # noqa: E501
        :rtype: str
        """
        return self._headline

    @headline.setter
    def headline(self, headline):
        """Sets the headline of this GameEditorial.


        :param headline: The headline of this GameEditorial.  # noqa: E501
        :type: str
        """

        self._headline = headline

    @property
    def subhead(self):
        """Gets the subhead of this GameEditorial.  # noqa: E501


        :return: The subhead of this GameEditorial.  # noqa: E501
        :rtype: str
        """
        return self._subhead

    @subhead.setter
    def subhead(self, subhead):
        """Sets the subhead of this GameEditorial.


        :param subhead: The subhead of this GameEditorial.  # noqa: E501
        :type: str
        """

        self._subhead = subhead

    @property
    def seo_title(self):
        """Gets the seo_title of this GameEditorial.  # noqa: E501


        :return: The seo_title of this GameEditorial.  # noqa: E501
        :rtype: str
        """
        return self._seo_title

    @seo_title.setter
    def seo_title(self, seo_title):
        """Sets the seo_title of this GameEditorial.


        :param seo_title: The seo_title of this GameEditorial.  # noqa: E501
        :type: str
        """

        self._seo_title = seo_title

    @property
    def seo_description(self):
        """Gets the seo_description of this GameEditorial.  # noqa: E501


        :return: The seo_description of this GameEditorial.  # noqa: E501
        :rtype: str
        """
        return self._seo_description

    @seo_description.setter
    def seo_description(self, seo_description):
        """Sets the seo_description of this GameEditorial.


        :param seo_description: The seo_description of this GameEditorial.  # noqa: E501
        :type: str
        """

        self._seo_description = seo_description

    @property
    def seo_keywords(self):
        """Gets the seo_keywords of this GameEditorial.  # noqa: E501


        :return: The seo_keywords of this GameEditorial.  # noqa: E501
        :rtype: str
        """
        return self._seo_keywords

    @seo_keywords.setter
    def seo_keywords(self, seo_keywords):
        """Sets the seo_keywords of this GameEditorial.


        :param seo_keywords: The seo_keywords of this GameEditorial.  # noqa: E501
        :type: str
        """

        self._seo_keywords = seo_keywords

    @property
    def slug(self):
        """Gets the slug of this GameEditorial.  # noqa: E501


        :return: The slug of this GameEditorial.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this GameEditorial.


        :param slug: The slug of this GameEditorial.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def commenting(self):
        """Gets the commenting of this GameEditorial.  # noqa: E501


        :return: The commenting of this GameEditorial.  # noqa: E501
        :rtype: bool
        """
        return self._commenting

    @commenting.setter
    def commenting(self, commenting):
        """Sets the commenting of this GameEditorial.


        :param commenting: The commenting of this GameEditorial.  # noqa: E501
        :type: bool
        """

        self._commenting = commenting

    @property
    def tagline(self):
        """Gets the tagline of this GameEditorial.  # noqa: E501


        :return: The tagline of this GameEditorial.  # noqa: E501
        :rtype: str
        """
        return self._tagline

    @tagline.setter
    def tagline(self, tagline):
        """Sets the tagline of this GameEditorial.


        :param tagline: The tagline of this GameEditorial.  # noqa: E501
        :type: str
        """

        self._tagline = tagline

    @property
    def token_data(self):
        """Gets the token_data of this GameEditorial.  # noqa: E501


        :return: The token_data of this GameEditorial.  # noqa: E501
        :rtype: GameEditorialTokenData
        """
        return self._token_data

    @token_data.setter
    def token_data(self, token_data):
        """Sets the token_data of this GameEditorial.


        :param token_data: The token_data of this GameEditorial.  # noqa: E501
        :type: GameEditorialTokenData
        """

        self._token_data = token_data

    @property
    def contributor(self):
        """Gets the contributor of this GameEditorial.  # noqa: E501


        :return: The contributor of this GameEditorial.  # noqa: E501
        :rtype: GameEditorialContributor
        """
        return self._contributor

    @contributor.setter
    def contributor(self, contributor):
        """Sets the contributor of this GameEditorial.


        :param contributor: The contributor of this GameEditorial.  # noqa: E501
        :type: GameEditorialContributor
        """

        self._contributor = contributor

    @property
    def keywords_display(self):
        """Gets the keywords_display of this GameEditorial.  # noqa: E501


        :return: The keywords_display of this GameEditorial.  # noqa: E501
        :rtype: list[GameEditorialKeyword]
        """
        return self._keywords_display

    @keywords_display.setter
    def keywords_display(self, keywords_display):
        """Sets the keywords_display of this GameEditorial.


        :param keywords_display: The keywords_display of this GameEditorial.  # noqa: E501
        :type: list[GameEditorialKeyword]
        """

        self._keywords_display = keywords_display

    @property
    def keywords_all(self):
        """Gets the keywords_all of this GameEditorial.  # noqa: E501


        :return: The keywords_all of this GameEditorial.  # noqa: E501
        :rtype: list[GameEditorialKeyword]
        """
        return self._keywords_all

    @keywords_all.setter
    def keywords_all(self, keywords_all):
        """Sets the keywords_all of this GameEditorial.


        :param keywords_all: The keywords_all of this GameEditorial.  # noqa: E501
        :type: list[GameEditorialKeyword]
        """

        self._keywords_all = keywords_all

    @property
    def approval(self):
        """Gets the approval of this GameEditorial.  # noqa: E501


        :return: The approval of this GameEditorial.  # noqa: E501
        :rtype: str
        """
        return self._approval

    @approval.setter
    def approval(self, approval):
        """Sets the approval of this GameEditorial.


        :param approval: The approval of this GameEditorial.  # noqa: E501
        :type: str
        """

        self._approval = approval

    @property
    def url(self):
        """Gets the url of this GameEditorial.  # noqa: E501


        :return: The url of this GameEditorial.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this GameEditorial.


        :param url: The url of this GameEditorial.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def data_uri(self):
        """Gets the data_uri of this GameEditorial.  # noqa: E501


        :return: The data_uri of this GameEditorial.  # noqa: E501
        :rtype: str
        """
        return self._data_uri

    @data_uri.setter
    def data_uri(self, data_uri):
        """Sets the data_uri of this GameEditorial.


        :param data_uri: The data_uri of this GameEditorial.  # noqa: E501
        :type: str
        """

        self._data_uri = data_uri

    @property
    def primary_keyword(self):
        """Gets the primary_keyword of this GameEditorial.  # noqa: E501


        :return: The primary_keyword of this GameEditorial.  # noqa: E501
        :rtype: GameEditorialKeyword
        """
        return self._primary_keyword

    @primary_keyword.setter
    def primary_keyword(self, primary_keyword):
        """Sets the primary_keyword of this GameEditorial.


        :param primary_keyword: The primary_keyword of this GameEditorial.  # noqa: E501
        :type: GameEditorialKeyword
        """

        self._primary_keyword = primary_keyword

    @property
    def media(self):
        """Gets the media of this GameEditorial.  # noqa: E501


        :return: The media of this GameEditorial.  # noqa: E501
        :rtype: GameEditorialMedia
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this GameEditorial.


        :param media: The media of this GameEditorial.  # noqa: E501
        :type: GameEditorialMedia
        """

        self._media = media

    @property
    def preview(self):
        """Gets the preview of this GameEditorial.  # noqa: E501


        :return: The preview of this GameEditorial.  # noqa: E501
        :rtype: str
        """
        return self._preview

    @preview.setter
    def preview(self, preview):
        """Sets the preview of this GameEditorial.


        :param preview: The preview of this GameEditorial.  # noqa: E501
        :type: str
        """

        self._preview = preview

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GameEditorial, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GameEditorial):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
