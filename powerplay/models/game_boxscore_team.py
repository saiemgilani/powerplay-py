# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GameBoxscoreTeam(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'team': 'GameBoxscoreTeamTeam',
        'team_stats': 'GameBoxscoreTeamTeamStats',
        'players': 'GameBoxscoreTeamPlayers',
        'goalies': 'list[float]',
        'skaters': 'list[float]',
        'on_ice': 'list[float]',
        'on_ice_plus': 'list[GameBoxscoreTeamOnIcePlus]',
        'scratches': 'list[float]',
        'penalty_box': 'list[float]',
        'coaches': 'list[GameBoxscoreTeamCoaches]'
    }

    attribute_map = {
        'team': 'team',
        'team_stats': 'teamStats',
        'players': 'players',
        'goalies': 'goalies',
        'skaters': 'skaters',
        'on_ice': 'onIce',
        'on_ice_plus': 'onIcePlus',
        'scratches': 'scratches',
        'penalty_box': 'penaltyBox',
        'coaches': 'coaches'
    }

    def __init__(self, team=None, team_stats=None, players=None, goalies=None, skaters=None, on_ice=None, on_ice_plus=None, scratches=None, penalty_box=None, coaches=None):  # noqa: E501
        """GameBoxscoreTeam - a model defined in Swagger"""  # noqa: E501
        self._team = None
        self._team_stats = None
        self._players = None
        self._goalies = None
        self._skaters = None
        self._on_ice = None
        self._on_ice_plus = None
        self._scratches = None
        self._penalty_box = None
        self._coaches = None
        self.discriminator = None
        if team is not None:
            self.team = team
        if team_stats is not None:
            self.team_stats = team_stats
        if players is not None:
            self.players = players
        if goalies is not None:
            self.goalies = goalies
        if skaters is not None:
            self.skaters = skaters
        if on_ice is not None:
            self.on_ice = on_ice
        if on_ice_plus is not None:
            self.on_ice_plus = on_ice_plus
        if scratches is not None:
            self.scratches = scratches
        if penalty_box is not None:
            self.penalty_box = penalty_box
        if coaches is not None:
            self.coaches = coaches

    @property
    def team(self):
        """Gets the team of this GameBoxscoreTeam.  # noqa: E501


        :return: The team of this GameBoxscoreTeam.  # noqa: E501
        :rtype: GameBoxscoreTeamTeam
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this GameBoxscoreTeam.


        :param team: The team of this GameBoxscoreTeam.  # noqa: E501
        :type: GameBoxscoreTeamTeam
        """

        self._team = team

    @property
    def team_stats(self):
        """Gets the team_stats of this GameBoxscoreTeam.  # noqa: E501


        :return: The team_stats of this GameBoxscoreTeam.  # noqa: E501
        :rtype: GameBoxscoreTeamTeamStats
        """
        return self._team_stats

    @team_stats.setter
    def team_stats(self, team_stats):
        """Sets the team_stats of this GameBoxscoreTeam.


        :param team_stats: The team_stats of this GameBoxscoreTeam.  # noqa: E501
        :type: GameBoxscoreTeamTeamStats
        """

        self._team_stats = team_stats

    @property
    def players(self):
        """Gets the players of this GameBoxscoreTeam.  # noqa: E501


        :return: The players of this GameBoxscoreTeam.  # noqa: E501
        :rtype: GameBoxscoreTeamPlayers
        """
        return self._players

    @players.setter
    def players(self, players):
        """Sets the players of this GameBoxscoreTeam.


        :param players: The players of this GameBoxscoreTeam.  # noqa: E501
        :type: GameBoxscoreTeamPlayers
        """

        self._players = players

    @property
    def goalies(self):
        """Gets the goalies of this GameBoxscoreTeam.  # noqa: E501


        :return: The goalies of this GameBoxscoreTeam.  # noqa: E501
        :rtype: list[float]
        """
        return self._goalies

    @goalies.setter
    def goalies(self, goalies):
        """Sets the goalies of this GameBoxscoreTeam.


        :param goalies: The goalies of this GameBoxscoreTeam.  # noqa: E501
        :type: list[float]
        """

        self._goalies = goalies

    @property
    def skaters(self):
        """Gets the skaters of this GameBoxscoreTeam.  # noqa: E501


        :return: The skaters of this GameBoxscoreTeam.  # noqa: E501
        :rtype: list[float]
        """
        return self._skaters

    @skaters.setter
    def skaters(self, skaters):
        """Sets the skaters of this GameBoxscoreTeam.


        :param skaters: The skaters of this GameBoxscoreTeam.  # noqa: E501
        :type: list[float]
        """

        self._skaters = skaters

    @property
    def on_ice(self):
        """Gets the on_ice of this GameBoxscoreTeam.  # noqa: E501


        :return: The on_ice of this GameBoxscoreTeam.  # noqa: E501
        :rtype: list[float]
        """
        return self._on_ice

    @on_ice.setter
    def on_ice(self, on_ice):
        """Sets the on_ice of this GameBoxscoreTeam.


        :param on_ice: The on_ice of this GameBoxscoreTeam.  # noqa: E501
        :type: list[float]
        """

        self._on_ice = on_ice

    @property
    def on_ice_plus(self):
        """Gets the on_ice_plus of this GameBoxscoreTeam.  # noqa: E501


        :return: The on_ice_plus of this GameBoxscoreTeam.  # noqa: E501
        :rtype: list[GameBoxscoreTeamOnIcePlus]
        """
        return self._on_ice_plus

    @on_ice_plus.setter
    def on_ice_plus(self, on_ice_plus):
        """Sets the on_ice_plus of this GameBoxscoreTeam.


        :param on_ice_plus: The on_ice_plus of this GameBoxscoreTeam.  # noqa: E501
        :type: list[GameBoxscoreTeamOnIcePlus]
        """

        self._on_ice_plus = on_ice_plus

    @property
    def scratches(self):
        """Gets the scratches of this GameBoxscoreTeam.  # noqa: E501


        :return: The scratches of this GameBoxscoreTeam.  # noqa: E501
        :rtype: list[float]
        """
        return self._scratches

    @scratches.setter
    def scratches(self, scratches):
        """Sets the scratches of this GameBoxscoreTeam.


        :param scratches: The scratches of this GameBoxscoreTeam.  # noqa: E501
        :type: list[float]
        """

        self._scratches = scratches

    @property
    def penalty_box(self):
        """Gets the penalty_box of this GameBoxscoreTeam.  # noqa: E501


        :return: The penalty_box of this GameBoxscoreTeam.  # noqa: E501
        :rtype: list[float]
        """
        return self._penalty_box

    @penalty_box.setter
    def penalty_box(self, penalty_box):
        """Sets the penalty_box of this GameBoxscoreTeam.


        :param penalty_box: The penalty_box of this GameBoxscoreTeam.  # noqa: E501
        :type: list[float]
        """

        self._penalty_box = penalty_box

    @property
    def coaches(self):
        """Gets the coaches of this GameBoxscoreTeam.  # noqa: E501


        :return: The coaches of this GameBoxscoreTeam.  # noqa: E501
        :rtype: list[GameBoxscoreTeamCoaches]
        """
        return self._coaches

    @coaches.setter
    def coaches(self, coaches):
        """Sets the coaches of this GameBoxscoreTeam.


        :param coaches: The coaches of this GameBoxscoreTeam.  # noqa: E501
        :type: list[GameBoxscoreTeamCoaches]
        """

        self._coaches = coaches

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GameBoxscoreTeam, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GameBoxscoreTeam):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
