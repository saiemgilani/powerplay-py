# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GameBoxscoreTeamOnIcePlus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'player_id': 'float',
        'shift_duration': 'float',
        'stamina': 'float'
    }

    attribute_map = {
        'player_id': 'playerId',
        'shift_duration': 'shiftDuration',
        'stamina': 'stamina'
    }

    def __init__(self, player_id=None, shift_duration=None, stamina=None):  # noqa: E501
        """GameBoxscoreTeamOnIcePlus - a model defined in Swagger"""  # noqa: E501
        self._player_id = None
        self._shift_duration = None
        self._stamina = None
        self.discriminator = None
        if player_id is not None:
            self.player_id = player_id
        if shift_duration is not None:
            self.shift_duration = shift_duration
        if stamina is not None:
            self.stamina = stamina

    @property
    def player_id(self):
        """Gets the player_id of this GameBoxscoreTeamOnIcePlus.  # noqa: E501


        :return: The player_id of this GameBoxscoreTeamOnIcePlus.  # noqa: E501
        :rtype: float
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this GameBoxscoreTeamOnIcePlus.


        :param player_id: The player_id of this GameBoxscoreTeamOnIcePlus.  # noqa: E501
        :type: float
        """

        self._player_id = player_id

    @property
    def shift_duration(self):
        """Gets the shift_duration of this GameBoxscoreTeamOnIcePlus.  # noqa: E501


        :return: The shift_duration of this GameBoxscoreTeamOnIcePlus.  # noqa: E501
        :rtype: float
        """
        return self._shift_duration

    @shift_duration.setter
    def shift_duration(self, shift_duration):
        """Sets the shift_duration of this GameBoxscoreTeamOnIcePlus.


        :param shift_duration: The shift_duration of this GameBoxscoreTeamOnIcePlus.  # noqa: E501
        :type: float
        """

        self._shift_duration = shift_duration

    @property
    def stamina(self):
        """Gets the stamina of this GameBoxscoreTeamOnIcePlus.  # noqa: E501


        :return: The stamina of this GameBoxscoreTeamOnIcePlus.  # noqa: E501
        :rtype: float
        """
        return self._stamina

    @stamina.setter
    def stamina(self, stamina):
        """Sets the stamina of this GameBoxscoreTeamOnIcePlus.


        :param stamina: The stamina of this GameBoxscoreTeamOnIcePlus.  # noqa: E501
        :type: float
        """

        self._stamina = stamina

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GameBoxscoreTeamOnIcePlus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GameBoxscoreTeamOnIcePlus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
