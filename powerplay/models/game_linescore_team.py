# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GameLinescoreTeam(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'team': 'GameBoxscoreTeamTeam',
        'goals': 'float',
        'shots_on_goal': 'float',
        'goalie_pulled': 'bool',
        'num_skaters': 'float',
        'power_play': 'bool'
    }

    attribute_map = {
        'team': 'team',
        'goals': 'goals',
        'shots_on_goal': 'shotsOnGoal',
        'goalie_pulled': 'goaliePulled',
        'num_skaters': 'numSkaters',
        'power_play': 'powerPlay'
    }

    def __init__(self, team=None, goals=None, shots_on_goal=None, goalie_pulled=None, num_skaters=None, power_play=None):  # noqa: E501
        """GameLinescoreTeam - a model defined in Swagger"""  # noqa: E501
        self._team = None
        self._goals = None
        self._shots_on_goal = None
        self._goalie_pulled = None
        self._num_skaters = None
        self._power_play = None
        self.discriminator = None
        if team is not None:
            self.team = team
        if goals is not None:
            self.goals = goals
        if shots_on_goal is not None:
            self.shots_on_goal = shots_on_goal
        if goalie_pulled is not None:
            self.goalie_pulled = goalie_pulled
        if num_skaters is not None:
            self.num_skaters = num_skaters
        if power_play is not None:
            self.power_play = power_play

    @property
    def team(self):
        """Gets the team of this GameLinescoreTeam.  # noqa: E501


        :return: The team of this GameLinescoreTeam.  # noqa: E501
        :rtype: GameBoxscoreTeamTeam
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this GameLinescoreTeam.


        :param team: The team of this GameLinescoreTeam.  # noqa: E501
        :type: GameBoxscoreTeamTeam
        """

        self._team = team

    @property
    def goals(self):
        """Gets the goals of this GameLinescoreTeam.  # noqa: E501


        :return: The goals of this GameLinescoreTeam.  # noqa: E501
        :rtype: float
        """
        return self._goals

    @goals.setter
    def goals(self, goals):
        """Sets the goals of this GameLinescoreTeam.


        :param goals: The goals of this GameLinescoreTeam.  # noqa: E501
        :type: float
        """

        self._goals = goals

    @property
    def shots_on_goal(self):
        """Gets the shots_on_goal of this GameLinescoreTeam.  # noqa: E501


        :return: The shots_on_goal of this GameLinescoreTeam.  # noqa: E501
        :rtype: float
        """
        return self._shots_on_goal

    @shots_on_goal.setter
    def shots_on_goal(self, shots_on_goal):
        """Sets the shots_on_goal of this GameLinescoreTeam.


        :param shots_on_goal: The shots_on_goal of this GameLinescoreTeam.  # noqa: E501
        :type: float
        """

        self._shots_on_goal = shots_on_goal

    @property
    def goalie_pulled(self):
        """Gets the goalie_pulled of this GameLinescoreTeam.  # noqa: E501


        :return: The goalie_pulled of this GameLinescoreTeam.  # noqa: E501
        :rtype: bool
        """
        return self._goalie_pulled

    @goalie_pulled.setter
    def goalie_pulled(self, goalie_pulled):
        """Sets the goalie_pulled of this GameLinescoreTeam.


        :param goalie_pulled: The goalie_pulled of this GameLinescoreTeam.  # noqa: E501
        :type: bool
        """

        self._goalie_pulled = goalie_pulled

    @property
    def num_skaters(self):
        """Gets the num_skaters of this GameLinescoreTeam.  # noqa: E501


        :return: The num_skaters of this GameLinescoreTeam.  # noqa: E501
        :rtype: float
        """
        return self._num_skaters

    @num_skaters.setter
    def num_skaters(self, num_skaters):
        """Sets the num_skaters of this GameLinescoreTeam.


        :param num_skaters: The num_skaters of this GameLinescoreTeam.  # noqa: E501
        :type: float
        """

        self._num_skaters = num_skaters

    @property
    def power_play(self):
        """Gets the power_play of this GameLinescoreTeam.  # noqa: E501


        :return: The power_play of this GameLinescoreTeam.  # noqa: E501
        :rtype: bool
        """
        return self._power_play

    @power_play.setter
    def power_play(self, power_play):
        """Sets the power_play of this GameLinescoreTeam.


        :param power_play: The power_play of this GameLinescoreTeam.  # noqa: E501
        :type: bool
        """

        self._power_play = power_play

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GameLinescoreTeam, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GameLinescoreTeam):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
