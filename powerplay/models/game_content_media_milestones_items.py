# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GameContentMediaMilestonesItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'description': 'str',
        'type': 'str',
        'time_absolute': 'datetime',
        'time_offset': 'str',
        'period': 'str',
        'stats_event_id': 'str',
        'team_id': 'str',
        'player_id': 'str',
        'period_time': 'str',
        'ordinal_num': 'str',
        'highlight': 'GameHighlight'
    }

    attribute_map = {
        'title': 'title',
        'description': 'description',
        'type': 'type',
        'time_absolute': 'timeAbsolute',
        'time_offset': 'timeOffset',
        'period': 'period',
        'stats_event_id': 'statsEventId',
        'team_id': 'teamId',
        'player_id': 'playerId',
        'period_time': 'periodTime',
        'ordinal_num': 'ordinalNum',
        'highlight': 'highlight'
    }

    def __init__(self, title=None, description=None, type=None, time_absolute=None, time_offset=None, period=None, stats_event_id=None, team_id=None, player_id=None, period_time=None, ordinal_num=None, highlight=None):  # noqa: E501
        """GameContentMediaMilestonesItems - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._description = None
        self._type = None
        self._time_absolute = None
        self._time_offset = None
        self._period = None
        self._stats_event_id = None
        self._team_id = None
        self._player_id = None
        self._period_time = None
        self._ordinal_num = None
        self._highlight = None
        self.discriminator = None
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if time_absolute is not None:
            self.time_absolute = time_absolute
        if time_offset is not None:
            self.time_offset = time_offset
        if period is not None:
            self.period = period
        if stats_event_id is not None:
            self.stats_event_id = stats_event_id
        if team_id is not None:
            self.team_id = team_id
        if player_id is not None:
            self.player_id = player_id
        if period_time is not None:
            self.period_time = period_time
        if ordinal_num is not None:
            self.ordinal_num = ordinal_num
        if highlight is not None:
            self.highlight = highlight

    @property
    def title(self):
        """Gets the title of this GameContentMediaMilestonesItems.  # noqa: E501


        :return: The title of this GameContentMediaMilestonesItems.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GameContentMediaMilestonesItems.


        :param title: The title of this GameContentMediaMilestonesItems.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this GameContentMediaMilestonesItems.  # noqa: E501


        :return: The description of this GameContentMediaMilestonesItems.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GameContentMediaMilestonesItems.


        :param description: The description of this GameContentMediaMilestonesItems.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this GameContentMediaMilestonesItems.  # noqa: E501


        :return: The type of this GameContentMediaMilestonesItems.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GameContentMediaMilestonesItems.


        :param type: The type of this GameContentMediaMilestonesItems.  # noqa: E501
        :type: str
        """
        allowed_values = ["BROADCAST_START", "BROADCAST_END", "GOAL", "PERIOD_END", "PERIOD_START", "SHOT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def time_absolute(self):
        """Gets the time_absolute of this GameContentMediaMilestonesItems.  # noqa: E501


        :return: The time_absolute of this GameContentMediaMilestonesItems.  # noqa: E501
        :rtype: datetime
        """
        return self._time_absolute

    @time_absolute.setter
    def time_absolute(self, time_absolute):
        """Sets the time_absolute of this GameContentMediaMilestonesItems.


        :param time_absolute: The time_absolute of this GameContentMediaMilestonesItems.  # noqa: E501
        :type: datetime
        """

        self._time_absolute = time_absolute

    @property
    def time_offset(self):
        """Gets the time_offset of this GameContentMediaMilestonesItems.  # noqa: E501


        :return: The time_offset of this GameContentMediaMilestonesItems.  # noqa: E501
        :rtype: str
        """
        return self._time_offset

    @time_offset.setter
    def time_offset(self, time_offset):
        """Sets the time_offset of this GameContentMediaMilestonesItems.


        :param time_offset: The time_offset of this GameContentMediaMilestonesItems.  # noqa: E501
        :type: str
        """

        self._time_offset = time_offset

    @property
    def period(self):
        """Gets the period of this GameContentMediaMilestonesItems.  # noqa: E501


        :return: The period of this GameContentMediaMilestonesItems.  # noqa: E501
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this GameContentMediaMilestonesItems.


        :param period: The period of this GameContentMediaMilestonesItems.  # noqa: E501
        :type: str
        """

        self._period = period

    @property
    def stats_event_id(self):
        """Gets the stats_event_id of this GameContentMediaMilestonesItems.  # noqa: E501


        :return: The stats_event_id of this GameContentMediaMilestonesItems.  # noqa: E501
        :rtype: str
        """
        return self._stats_event_id

    @stats_event_id.setter
    def stats_event_id(self, stats_event_id):
        """Sets the stats_event_id of this GameContentMediaMilestonesItems.


        :param stats_event_id: The stats_event_id of this GameContentMediaMilestonesItems.  # noqa: E501
        :type: str
        """

        self._stats_event_id = stats_event_id

    @property
    def team_id(self):
        """Gets the team_id of this GameContentMediaMilestonesItems.  # noqa: E501


        :return: The team_id of this GameContentMediaMilestonesItems.  # noqa: E501
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this GameContentMediaMilestonesItems.


        :param team_id: The team_id of this GameContentMediaMilestonesItems.  # noqa: E501
        :type: str
        """

        self._team_id = team_id

    @property
    def player_id(self):
        """Gets the player_id of this GameContentMediaMilestonesItems.  # noqa: E501


        :return: The player_id of this GameContentMediaMilestonesItems.  # noqa: E501
        :rtype: str
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this GameContentMediaMilestonesItems.


        :param player_id: The player_id of this GameContentMediaMilestonesItems.  # noqa: E501
        :type: str
        """

        self._player_id = player_id

    @property
    def period_time(self):
        """Gets the period_time of this GameContentMediaMilestonesItems.  # noqa: E501


        :return: The period_time of this GameContentMediaMilestonesItems.  # noqa: E501
        :rtype: str
        """
        return self._period_time

    @period_time.setter
    def period_time(self, period_time):
        """Sets the period_time of this GameContentMediaMilestonesItems.


        :param period_time: The period_time of this GameContentMediaMilestonesItems.  # noqa: E501
        :type: str
        """

        self._period_time = period_time

    @property
    def ordinal_num(self):
        """Gets the ordinal_num of this GameContentMediaMilestonesItems.  # noqa: E501


        :return: The ordinal_num of this GameContentMediaMilestonesItems.  # noqa: E501
        :rtype: str
        """
        return self._ordinal_num

    @ordinal_num.setter
    def ordinal_num(self, ordinal_num):
        """Sets the ordinal_num of this GameContentMediaMilestonesItems.


        :param ordinal_num: The ordinal_num of this GameContentMediaMilestonesItems.  # noqa: E501
        :type: str
        """

        self._ordinal_num = ordinal_num

    @property
    def highlight(self):
        """Gets the highlight of this GameContentMediaMilestonesItems.  # noqa: E501


        :return: The highlight of this GameContentMediaMilestonesItems.  # noqa: E501
        :rtype: GameHighlight
        """
        return self._highlight

    @highlight.setter
    def highlight(self, highlight):
        """Sets the highlight of this GameContentMediaMilestonesItems.


        :param highlight: The highlight of this GameContentMediaMilestonesItems.  # noqa: E501
        :type: GameHighlight
        """

        self._highlight = highlight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GameContentMediaMilestonesItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GameContentMediaMilestonesItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
