# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GameHighlightPlaybacks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'width': 'str',
        'height': 'str',
        'url': 'str'
    }

    attribute_map = {
        'name': 'name',
        'width': 'width',
        'height': 'height',
        'url': 'url'
    }

    def __init__(self, name=None, width=None, height=None, url=None):  # noqa: E501
        """GameHighlightPlaybacks - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._width = None
        self._height = None
        self._url = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if url is not None:
            self.url = url

    @property
    def name(self):
        """Gets the name of this GameHighlightPlaybacks.  # noqa: E501


        :return: The name of this GameHighlightPlaybacks.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GameHighlightPlaybacks.


        :param name: The name of this GameHighlightPlaybacks.  # noqa: E501
        :type: str
        """
        allowed_values = ["FLASH_192K_320X180", "FLASH_450K_400X224", "FLASH_1200K_640X360", "FLASH_1800K_960X540", "HTTP_CLOUD_MOBILE", "HTTP_CLOUD_TABLET", "HTTP_CLOUD_TABLET_60", "HTTP_CLOUD_WIRED", "HTTP_CLOUD_WIRED_60", "HTTP_CLOUD_WIRED_WEB"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"  # noqa: E501
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def width(self):
        """Gets the width of this GameHighlightPlaybacks.  # noqa: E501


        :return: The width of this GameHighlightPlaybacks.  # noqa: E501
        :rtype: str
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this GameHighlightPlaybacks.


        :param width: The width of this GameHighlightPlaybacks.  # noqa: E501
        :type: str
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this GameHighlightPlaybacks.  # noqa: E501


        :return: The height of this GameHighlightPlaybacks.  # noqa: E501
        :rtype: str
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this GameHighlightPlaybacks.


        :param height: The height of this GameHighlightPlaybacks.  # noqa: E501
        :type: str
        """

        self._height = height

    @property
    def url(self):
        """Gets the url of this GameHighlightPlaybacks.  # noqa: E501


        :return: The url of this GameHighlightPlaybacks.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this GameHighlightPlaybacks.


        :param url: The url of this GameHighlightPlaybacks.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GameHighlightPlaybacks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GameHighlightPlaybacks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
